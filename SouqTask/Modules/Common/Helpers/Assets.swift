//
//  Assets.swift
//  Open Souq Assignment
//
//  Generated using SwiftGen, by O.Halligon — https://github.com/AliSoftware/SwiftGen
//  Copyright © 2015 Mamouneyya. All rights reserved.
//

import Foundation
import UIKit

// MARK: - Storyboards
// Automatically generated by swiftrsrc. Do not edit.

protocol StoryboardSceneType {
    static var storyboardName: String { get }
}

extension StoryboardSceneType {
    static func storyboard() -> UIStoryboard {
        return UIStoryboard(name: self.storyboardName, bundle: nil)
    }
    
    static func initialViewController() -> UIViewController {
        return storyboard().instantiateInitialViewController()!
    }
}

extension StoryboardSceneType where Self: RawRepresentable, Self.RawValue == String {
    func viewController() -> UIViewController {
        return Self.storyboard().instantiateViewControllerWithIdentifier(self.rawValue)
    }
    static func viewController(identifier: Self) -> UIViewController {
        return identifier.viewController()
    }
}

protocol StoryboardSegueType: RawRepresentable { }

extension UIViewController {
    func performSegue<S: StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
        performSegueWithIdentifier(segue.rawValue, sender: sender)
    }
}

struct StoryboardScene {
    enum Main: String, StoryboardSceneType {
        static let storyboardName = "Main"
        
        case FavoritesScene = "Favorites"
        static func instanciateFavorites() -> FavoritesCollectionViewController {
            return StoryboardScene.Main.FavoritesScene.viewController() as! FavoritesCollectionViewController
        }
        
        case FavoritesNavigationScene = "FavoritesNavigation"
        static func instanciateFavoritesNavigation() -> UINavigationController {
            return StoryboardScene.Main.FavoritesNavigationScene.viewController() as! UINavigationController
        }
        
        case InitialSetupNavigationScene = "InitialSetupNavigation"
        static func instanciateInitialSetupNavigation() -> UINavigationController {
            return StoryboardScene.Main.InitialSetupNavigationScene.viewController() as! UINavigationController
        }
        
        case LoginScene = "Login"
        static func instanciateLogin() -> LoginTableViewController {
            return StoryboardScene.Main.LoginScene.viewController() as! LoginTableViewController
        }
        
        case MainScene = "Main"
        static func instanciateMain() -> UITabBarController {
            return StoryboardScene.Main.MainScene.viewController() as! UITabBarController
        }
        
        case ProductScene = "Product"
        static func instanciateProduct() -> ProductTableViewController {
            return StoryboardScene.Main.ProductScene.viewController() as! ProductTableViewController
        }
        
        case ProductTypesScene = "ProductTypes"
        static func instanciateProductTypes() -> ProductTypesViewController {
            return StoryboardScene.Main.ProductTypesScene.viewController() as! ProductTypesViewController
        }
        
        case ProductsScene = "Products"
        static func instanciateProducts() -> ProductsCollectionViewController {
            return StoryboardScene.Main.ProductsScene.viewController() as! ProductsCollectionViewController
        }
        
        case ProductsNavigationScene = "ProductsNavigation"
        static func instanciateProductsNavigation() -> UINavigationController {
            return StoryboardScene.Main.ProductsNavigationScene.viewController() as! UINavigationController
        }
        
        case StartupScene = "Startup"
        static func instanciateStartup() -> StartupViewController {
            return StoryboardScene.Main.StartupScene.viewController() as! StartupViewController
        }
    }
}

struct StoryboardSegue {
}

// MARK: - Asset Catalogs

extension UIImage {
    enum ResizableAsset: String {
        case RoundedShadowMask = "rounded-shadow-mask"
        
        var image: UIImage {
            return UIImage(resizableAsset: self).resizableImageWithCapInsets(capInsets, resizingMode: resizingMode)
        }
        
        var capInsets: UIEdgeInsets {
            switch self {
            case .RoundedShadowMask:
                return UIEdgeInsetsMake(8, 8, 8, 8)
            }
        }
        
        var resizingMode: UIImageResizingMode {
            switch self {
            case .RoundedShadowMask:
                return .Stretch
            }
        }
    }
    
    private convenience init!(resizableAsset: ResizableAsset) {
        self.init(named: resizableAsset.rawValue)
    }
}